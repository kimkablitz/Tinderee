{"version":3,"sources":["components/Navbar/index.js","components/Footer/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/FriendCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","style","color","this","props","msg","pullright","score","topScore","React","Component","Footer","Jumbotron","Wrapper","children","FriendCard","_this","onClick","handleClick","cardId","alt","friend","name","src","image","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","friends","friendsData","game","bind","assertThisInitialized","shuffleCards","_this2","currentList","includes","setState","prevState","push","console","log","myArray","arrLength","length","i","j","Math","floor","random","temp","_this3","components_Wrapper","components_Navbar","components_Jumbotron","map","components_FriendCard","key","id","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+oFAwBeA,gMAfX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,aAEFJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAgCE,MAAO,CAAEC,MAAO,WAAaC,KAAKC,MAAMC,KACvFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQO,UAAU,QAAjC,UACUH,KAAKC,MAAMG,MADrB,iBAC0CJ,KAAKC,MAAMI,kBAZxCC,IAAMC,kBCOZC,MARf,WACE,OACEf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,gCCeSc,0LAfP,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,+KAGAF,EAAAC,EAAAC,cAAA,kBARQW,IAAMC,kBCGfG,MAJf,SAAiBT,GACf,OAAOR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,EAAMU,kBC6B1BC,0LA3BJ,IAAAC,EAAAb,KAYP,OACEP,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBkB,QAAW,kBAAMD,EAAKZ,MAAMc,YAAaF,EAAKZ,MAAMe,UACjFvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKjB,KAAKC,MAAMiB,OAAOC,KAAMC,IAAKpB,KAAKC,MAAMiB,OAAOG,mBAnB5Cf,IAAMC,YC2EhBe,cArEb,SAAAA,IAAc,IAAAT,EAAA,OAAAU,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACZT,EAAAU,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,QACK4B,MAAQ,CACXC,QAASC,EACT1B,MAAO,EACPC,SAAU,EACVH,IAAM,GACN6B,KAAM,IAGRlB,EAAKE,YAAcF,EAAKE,YAAYiB,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAV,KACnBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAV,KAXRA,2EAcFG,GAAQ,IAAAmB,EAAAnC,KAEZoC,EAAcpC,KAAK4B,MAAMG,KACxBK,EAAYC,SAASrB,GAYxBhB,KAAKsC,SAAS,SAAAC,GAEZ,MAAO,CACLlC,SAAUkC,EAAUnC,MACpBA,MAAO+B,EAAKP,MAAMxB,MAAQ+B,EAAKP,MAAMxB,MACrCF,IAAI,mCAhBLkC,EAAYI,KAAKxB,GAChByB,QAAQC,IAAIN,GACZpC,KAAKsC,SAAS,SAAAC,GAEZ,MAAO,CACLnC,MAAOmC,EAAUnC,MAAQ,EACzBF,IAAM,0BAgBlBF,KAAKkC,aAAalC,KAAK4B,MAAMC,8CAGlBc,GAEX,IADA,IAAIC,EAAYD,EAAQE,OAAS,EACxBC,EAAI,EAAGA,GAAKF,EAAWE,IAAK,CACnC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAYN,GAClCO,EAAOR,EAAQG,GACnBH,EAAQG,GAAKH,EAAQI,GACrBJ,EAAQI,GAAKI,EAEfnD,KAAKsC,SAAS,CAAET,QAASc,qCAGlB,IAAAS,EAAApD,KAEP,OACEP,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAQlD,MAAOJ,KAAK4B,MAAMxB,MAAOC,SAAUL,KAAK4B,MAAMvB,SAAUH,IAAKF,KAAK4B,MAAM1B,MAChFT,EAAAC,EAAAC,cAAC4D,EAAD,MACCvD,KAAK4B,MAAMC,QAAQ2B,IAAI,SAAAtC,GAAM,OAAIzB,EAAAC,EAAAC,cAAC8D,EAAD,CAAYvC,OAAQA,EAAQwC,IAAKxC,EAAOyC,GAAI3C,OAAQE,EAAOyC,GAAI5C,YAAaqC,EAAKrC,gBAEnHtB,EAAAC,EAAAC,cAACiE,EAAD,cA/DUrD,aCGEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86ded092.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nclass Navbar extends React.Component {\n \n  render() {\n  \n\n    return (\n      <nav className=\"navbar navbar-expand-lg  bg-warning sticky-top\">\n        <div className=\"brand\">\n          <a href=\"/\">Tinderee</a>\n        </div>\n        <div className=\"text align-center mx-auto ins\" style={{ color: \"purple\" }}>{this.props.msg}</div>\n        <div className=\"score\" pullright=\"true\">\n          Score: {this.props.score} | Top Score: {this.props.topScore}\n        </div>\n      </nav>\n    );\n  }\n\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>@Tinderee 2018</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nclass Jumbotron extends React.Component {\n    render() {\n        return (\n            <div className=\"jumbotron bg-dark\">\n                <h1>Have you met me?</h1>\n                <p>\n                    Below are photos of other members, some of them also want to go on a date with you, but make sure you will not choose the same person twice or they will get angry\n</p>\n                <p>\n                    {/* <Button bsStyle=\"primary\">Learn more</Button> */}\n                </p>\n            </div>\n        )\n    }\n\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n// let a = []\n\nclass FriendCard extends React.Component {\n\n  render() {\n    // console.log(this.props.friend.id)\n\n    // const shuffle = (id) => {\n\n    //   for (let i = a.length - 1; i > 0; i--) {\n    //     const j = Math.floor(Math.random() * (i + 1));\n    //     [a[i], a[j]] = [a[j], a[i]];\n    //   }\n    // }\n   \n\n    return (\n      <button >\n        <div className=\"container\" >\n        <div className=\"card\" >\n          <div className=\"img-container\" onClick = {() => this.props.handleClick (this.props.cardId)}>\n            <img alt={this.props.friend.name} src={this.props.friend.image} />\n          </div>\n        </div>\n        </div>\n      </button>\n\n    );\n  }\n}\n\nexport default FriendCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport friendsData from \"./friends.json\";\nimport FriendCard from \"./components/FriendCard\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      friends: friendsData,\n      score: 0,\n      topScore: 0,\n      msg:  \"\",\n      game: []\n\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.shuffleCards = this.shuffleCards.bind(this)\n  }\n\n  handleClick(cardId) {\n    // console.log(cardId)\n    const currentList = this.state.game\n      if (!currentList.includes(cardId)){\n           currentList.push(cardId)\n            console.log(currentList)\n            this.setState(prevState => {\n\n              return {\n                score: prevState.score + 1,\n                msg:  \"GAME IS IN PROGRESS\"\n              }\n            })\n      }\n      else {\n        this.setState(prevState => {\n\n          return {\n            topScore: prevState.score,\n            score: this.state.score - this.state.score,\n            msg:\"YOU HAVE GUESSED INCORRECTLY\"\n          }\n        })\n        // console.log(\"uhoh same\")\n      }\n\n    this.shuffleCards(this.state.friends)\n  }\n\n  shuffleCards(myArray) {\n    let arrLength = myArray.length - 1;\n    for (let i = 0; i <= arrLength; i++) {\n      const j = Math.floor(Math.random() * (arrLength));\n      let temp = myArray[i];\n      myArray[i] = myArray[j]\n      myArray[j] = temp\n    }\n    this.setState({ friends: myArray })\n  }\n\n  render() {\n\n    return (\n      <Wrapper>\n        <Navbar score={this.state.score} topScore={this.state.topScore} msg={this.state.msg}/>\n        <Jumbotron />\n        {this.state.friends.map(friend => <FriendCard friend={friend} key={friend.id} cardId={friend.id} handleClick={this.handleClick} />)\n        }\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}